// Define 2_1 project
project(':Ch2:Recipe_2_1') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.sequence.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_1 project 


// Define 2_2_i project
project(':Ch2:Recipe_2_2_i') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.shop.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_2_i project 

// Define 2_2_ii project
project(':Ch2:Recipe_2_2_ii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.sequence.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_2_ii project


// Define 2_2_iii project
project(':Ch2:Recipe_2_2_iii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.sequence.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_2_iii project

// Define 2_3_i project
project(':Ch2:Recipe_2_3_i') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.sequence.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_3_i project 

// Define 2_3_ii project
project(':Ch2:Recipe_2_3_ii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.sequence.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_3_ii project 

// Define 2_3_iii project
project(':Ch2:Recipe_2_3_iii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.sequence.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_3_iii project 