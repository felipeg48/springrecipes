// Define 2_1 project
project(':Ch2:Recipe_2_1') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.sequence.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_1 project 


// Define 2_2_i project
project(':Ch2:Recipe_2_2_i') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.shop.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_2_i project 

// Define 2_2_ii project
project(':Ch2:Recipe_2_2_ii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.sequence.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_2_ii project


// Define 2_2_iii project
project(':Ch2:Recipe_2_2_iii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.sequence.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_2_iii project

// Define 2_3_i project
project(':Ch2:Recipe_2_3_i') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.sequence.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_3_i project 

// Define 2_3_ii project
project(':Ch2:Recipe_2_3_ii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.sequence.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_3_ii project 

// Define 2_3_iii project
project(':Ch2:Recipe_2_3_iii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.sequence.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_3_iii project 


// Define 2_4_i project
project(':Ch2:Recipe_2_4_i') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.sequence.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_4_i project 

// Define 2_4_ii project
project(':Ch2:Recipe_2_4_ii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.sequence.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_4_ii project 

// Define 2_4_iii project
project(':Ch2:Recipe_2_4_iii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.sequence.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_4_iii project 


// Define 2_4_iv project
project(':Ch2:Recipe_2_4_iv') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.sequence.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_4_iv project 

// Define 2_4_v project
project(':Ch2:Recipe_2_4_v') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.sequence.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_4_v project 


// Define 2_4_vi project
project(':Ch2:Recipe_2_4_vi') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.sequence.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_4_vi project 

// Define 2_4_vii project
project(':Ch2:Recipe_2_4_vii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.sequence.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_4_vii project 

// Define 2_5_i project
project(':Ch2:Recipe_2_5_i') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.shop.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_5_i project 

// Define 2_5_ii project
project(':Ch2:Recipe_2_5_ii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.shop.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_5_ii project 


// Define 2_6_i project
project(':Ch2:Recipe_2_6_i') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.shop.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_6_i project 


// Define 2_6_ii project
project(':Ch2:Recipe_2_6_ii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.shop.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_6_ii project 


// Define 2_7 project
project(':Ch2:Recipe_2_7') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.shop.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_7 project 


// Define 2_8 project
project(':Ch2:Recipe_2_8') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.shop.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_8 project 

// Define 2_9 project
project(':Ch2:Recipe_2_9') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.shop.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_9 project 

// Define 2_10_i project
project(':Ch2:Recipe_2_10_i') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.shop.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_10_i project 


// Define 2_10_ii project
project(':Ch2:Recipe_2_10_ii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.shop.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_10_ii project 

// Define 2_10_iii project
project(':Ch2:Recipe_2_10_iii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.shop.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_10_iii project 


// Define 2_11_i project
project(':Ch2:Recipe_2_11_i') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.shop.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_11_i project 


// Define 2_11_ii project
project(':Ch2:Recipe_2_11_ii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.shop.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_11_ii project 

// Define 2_11_iii project
project(':Ch2:Recipe_2_11_iii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.shop.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_11_iii project 


// Define 2_11_iv project
project(':Ch2:Recipe_2_11_iv') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.shop.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_11_iv project 

// Define 2_12 project
project(':Ch2:Recipe_2_12') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.shop.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_12 project 

// Define 2_13_i project
project(':Ch2:Recipe_2_13_i') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-aop', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.shop.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_13_i project 

// Define 2_13_ii project
project(':Ch2:Recipe_2_13_ii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-aop', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.shop.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_13_ii project 


// Define 2_14_i project
project(':Ch2:Recipe_2_14_i') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.shop.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_14_i project 


// Define 2_14_ii project
project(':Ch2:Recipe_2_14_ii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.shop.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_14_ii project

// Define 2_14_iii project
project(':Ch2:Recipe_2_14_iii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.shop.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_14_iii project


// Define 2_15 project
project(':Ch2:Recipe_2_15') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.shop.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_15 project 


// Define 2_16_i project
project(':Ch2:Recipe_2_16_i') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.sequence.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_16_i project 


// Define 2_16_ii project
project(':Ch2:Recipe_2_16_ii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.sequence.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_16_ii project 


// Define 2_16_iii project
project(':Ch2:Recipe_2_16_iii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.sequence.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_16_iii project 


// Define 2_16_iv project
project(':Ch2:Recipe_2_16_iv') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.sequence.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_16_iv project 

// Define 2_17_i project
project(':Ch2:Recipe_2_17_i') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
    compile group: 'org.springframework', name: 'spring-aop', version:'3.2.0.RELEASE'
    compile group: 'aopalliance', name: 'aopalliance', version:'1.0'
    compile group: 'org.jruby', name: 'jruby', version:'1.7.3'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.interest.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_17_i project 


// Define 2_17_ii project
project(':Ch2:Recipe_2_17_ii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
    compile group: 'org.springframework', name: 'spring-aop', version:'3.2.0.RELEASE'
    compile group: 'aopalliance', name: 'aopalliance', version:'1.0'
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version:'2.1.2'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.interest.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_17_ii project 


// Define 2_17_iii project
project(':Ch2:Recipe_2_17_iii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
    compile group: 'org.springframework', name: 'spring-aop', version:'3.2.0.RELEASE'
    compile group: 'aopalliance', name: 'aopalliance', version:'1.0'
    compile group: 'org.beanshell', name: 'bsh', version:'2.0b5'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.interest.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_17_iii project 

// Define 2_18_i project
project(':Ch2:Recipe_2_18_i') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
    compile group: 'org.springframework', name: 'spring-aop', version:'3.2.0.RELEASE'
    compile group: 'aopalliance', name: 'aopalliance', version:'1.0'
    compile group: 'org.jruby', name: 'jruby', version:'1.7.3'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.interest.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_18_i project 


// Define 2_18_ii project
project(':Ch2:Recipe_2_18_ii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
    compile group: 'org.springframework', name: 'spring-aop', version:'3.2.0.RELEASE'
    compile group: 'aopalliance', name: 'aopalliance', version:'1.0'
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version:'2.1.2'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.interest.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_18_ii project 


// Define 2_18_iii project
project(':Ch2:Recipe_2_18_iii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
    compile group: 'org.springframework', name: 'spring-aop', version:'3.2.0.RELEASE'
    compile group: 'aopalliance', name: 'aopalliance', version:'1.0'
    compile group: 'org.beanshell', name: 'bsh', version:'2.0b5'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.interest.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_18_iii project 

// Define 2_19_i project
project(':Ch2:Recipe_2_19_i') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
    compile group: 'org.springframework', name: 'spring-aop', version:'3.2.0.RELEASE'
    compile group: 'aopalliance', name: 'aopalliance', version:'1.0'
    compile group: 'org.jruby', name: 'jruby', version:'1.7.3'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.interest.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_19_i project 


// Define 2_19_ii project
project(':Ch2:Recipe_2_19_ii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
    compile group: 'org.springframework', name: 'spring-aop', version:'3.2.0.RELEASE'
    compile group: 'aopalliance', name: 'aopalliance', version:'1.0'
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version:'2.1.2'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.interest.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_19_ii project 


// Define 2_19_iii project
project(':Ch2:Recipe_2_19_iii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
    compile group: 'org.springframework', name: 'spring-aop', version:'3.2.0.RELEASE'
    compile group: 'aopalliance', name: 'aopalliance', version:'1.0'
    compile group: 'org.beanshell', name: 'bsh', version:'2.0b5'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.interest.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_19_iii project 


// Define 2_20_i project
project(':Ch2:Recipe_2_20_i') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
    compile group: 'org.springframework', name: 'spring-aop', version:'3.2.0.RELEASE'
    compile group: 'aopalliance', name: 'aopalliance', version:'1.0'
    compile group: 'org.jruby', name: 'jruby', version:'1.7.3'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.interest.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_20_i project 


// Define 2_20_ii project
project(':Ch2:Recipe_2_20_ii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
    compile group: 'org.springframework', name: 'spring-aop', version:'3.2.0.RELEASE'
    compile group: 'aopalliance', name: 'aopalliance', version:'1.0'
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version:'2.1.2'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.interest.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_20_ii project 


// Define 2_20_iii project
project(':Ch2:Recipe_2_20_iii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
    compile group: 'org.springframework', name: 'spring-aop', version:'3.2.0.RELEASE'
    compile group: 'aopalliance', name: 'aopalliance', version:'1.0'
    compile group: 'org.beanshell', name: 'bsh', version:'2.0b5'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.interest.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 2_20_iii project 