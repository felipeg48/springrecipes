// Define 3_1_i project
project(':Ch3:Recipe_3_1_i') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.sequence.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 3_1_i project 

// Define 3_1_ii project
project(':Ch3:Recipe_3_1_ii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.sequence.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 3_1_ii project 

// Define 3_2 project
project(':Ch3:Recipe_3_2') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.shop.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 3_2 project 

// Define 3_3_i project
project(':Ch3:Recipe_3_3_i') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.sequence.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 3_3_i project 


// Define 3_3_ii project
project(':Ch3:Recipe_3_3_ii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.sequence.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 3_3_ii project 



// Define 3_5_i project
project(':Ch3:Recipe_3_5_i') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.shop.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 3_5_i project 


// Define 3_5_ii project
project(':Ch3:Recipe_3_5_ii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.shop.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 3_5_ii project 


// Define 3_6_i project
project(':Ch3:Recipe_3_6_i') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.shop.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 3_6_i project 


// Define 3_6_ii project
project(':Ch3:Recipe_3_6_ii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.shop.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 3_6_ii project 


// Define 3_7 project
project(':Ch3:Recipe_3_7') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.shop.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 3_7 project 


// Define 3_8_i project
project(':Ch3:Recipe_3_8_i') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.shop.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 3_8_i project 


// Define 3_8_ii project
project(':Ch3:Recipe_3_8_ii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.shop.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 3_8_ii project 


// Define 3_9_i project
project(':Ch3:Recipe_3_9_i') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.shop.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 3_9_i project 


// Define 3_9_ii project
project(':Ch3:Recipe_3_9_ii') {   
  // Define defaultTasks, first clean then build for springintro
  defaultTasks 'clean', 'build'
  // Define dependencies
  dependencies {
    compile group: 'org.springframework', name: 'spring-core', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-expression', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version:'3.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.0.RELEASE'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
   }
   // Define how to build final JAR for project
   jar {
     //The following creates a fat-JAR with all dependencies embedded 
     // from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
     //Instead use custom task to copy files to lib directory and create a custom manfiest
     dependsOn copyDependenciesToLibDir
     manifest.attributes("Main-Class": "com.apress.springrecipes.shop.Main")
     project.ext["CP"] = new StringBuffer()
     configurations.runtime.allDependencies.each { dep ->
       project.ext["CP"].append(' ')
       project.ext["CP"].append("lib/${dep.getName()}-${dep.getVersion()}.jar")
     }
     project.ext["CP"].delete(0,1)
     manifest.attributes("Class-Path": project.ext["CP"].toString())
   }
} // End 3_9_ii project 